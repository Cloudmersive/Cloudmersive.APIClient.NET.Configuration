/* 
 * configapi
 *
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Configuration.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Configuration.Model
{
    /// <summary>
    /// HttpOrchestrationTask
    /// </summary>
    [DataContract]
    public partial class HttpOrchestrationTask :  IEquatable<HttpOrchestrationTask>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HttpOrchestrationTask" /> class.
        /// </summary>
        /// <param name="taskName">An identifier for this task name, e.g. CreateCustomer or ScanForVirus; allows you to refer to this task from other tasks; if not supplied, it will default to a 0-based integer index of the task.</param>
        /// <param name="httpMethod">HTTP Method, e.g. GET, PUT, POST, etc..</param>
        /// <param name="uRL">HTTP URL to orchestrate.</param>
        /// <param name="httpHeaders">Optional; HTTP headers to apply to the request.</param>
        /// <param name="queryParameters">Optional; query parameters, these query parameters will be incorporated into the URL.</param>
        /// <param name="formDataParameters">Optional; FormData parameters, these parameters will be stored in the body in a multi-part encoding.</param>
        /// <param name="wwwFormUrlEncodedParameters">Optional; x-www-form-urlencoded paramereters, these parameters will be stored in the body as an application/x-www-form-urlencoded encoding.</param>
        /// <param name="rawTextBody">Optional; sets the body of the request as raw text, cannot be used with other parameter types in the same request.</param>
        /// <param name="rawBinaryBody">Optional; set the body of the request as binary, cannot be used with other parameter types in the same request.</param>
        public HttpOrchestrationTask(string taskName = default(string), string httpMethod = default(string), string uRL = default(string), List<HttpOrchestrationHeader> httpHeaders = default(List<HttpOrchestrationHeader>), List<HttpGetParameter> queryParameters = default(List<HttpGetParameter>), List<HttpFormDataParameter> formDataParameters = default(List<HttpFormDataParameter>), List<HttpWwwFormUrlEncodedParameter> wwwFormUrlEncodedParameters = default(List<HttpWwwFormUrlEncodedParameter>), HttpRawTextParameter rawTextBody = default(HttpRawTextParameter), HttpRawBinaryParameter rawBinaryBody = default(HttpRawBinaryParameter))
        {
            this.TaskName = taskName;
            this.HttpMethod = httpMethod;
            this.URL = uRL;
            this.HttpHeaders = httpHeaders;
            this.QueryParameters = queryParameters;
            this.FormDataParameters = formDataParameters;
            this.WwwFormUrlEncodedParameters = wwwFormUrlEncodedParameters;
            this.RawTextBody = rawTextBody;
            this.RawBinaryBody = rawBinaryBody;
        }
        
        /// <summary>
        /// An identifier for this task name, e.g. CreateCustomer or ScanForVirus; allows you to refer to this task from other tasks; if not supplied, it will default to a 0-based integer index of the task
        /// </summary>
        /// <value>An identifier for this task name, e.g. CreateCustomer or ScanForVirus; allows you to refer to this task from other tasks; if not supplied, it will default to a 0-based integer index of the task</value>
        [DataMember(Name="TaskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// HTTP Method, e.g. GET, PUT, POST, etc.
        /// </summary>
        /// <value>HTTP Method, e.g. GET, PUT, POST, etc.</value>
        [DataMember(Name="HttpMethod", EmitDefaultValue=false)]
        public string HttpMethod { get; set; }

        /// <summary>
        /// HTTP URL to orchestrate
        /// </summary>
        /// <value>HTTP URL to orchestrate</value>
        [DataMember(Name="URL", EmitDefaultValue=false)]
        public string URL { get; set; }

        /// <summary>
        /// Optional; HTTP headers to apply to the request
        /// </summary>
        /// <value>Optional; HTTP headers to apply to the request</value>
        [DataMember(Name="HttpHeaders", EmitDefaultValue=false)]
        public List<HttpOrchestrationHeader> HttpHeaders { get; set; }

        /// <summary>
        /// Optional; query parameters, these query parameters will be incorporated into the URL
        /// </summary>
        /// <value>Optional; query parameters, these query parameters will be incorporated into the URL</value>
        [DataMember(Name="QueryParameters", EmitDefaultValue=false)]
        public List<HttpGetParameter> QueryParameters { get; set; }

        /// <summary>
        /// Optional; FormData parameters, these parameters will be stored in the body in a multi-part encoding
        /// </summary>
        /// <value>Optional; FormData parameters, these parameters will be stored in the body in a multi-part encoding</value>
        [DataMember(Name="FormDataParameters", EmitDefaultValue=false)]
        public List<HttpFormDataParameter> FormDataParameters { get; set; }

        /// <summary>
        /// Optional; x-www-form-urlencoded paramereters, these parameters will be stored in the body as an application/x-www-form-urlencoded encoding
        /// </summary>
        /// <value>Optional; x-www-form-urlencoded paramereters, these parameters will be stored in the body as an application/x-www-form-urlencoded encoding</value>
        [DataMember(Name="WwwFormUrlEncodedParameters", EmitDefaultValue=false)]
        public List<HttpWwwFormUrlEncodedParameter> WwwFormUrlEncodedParameters { get; set; }

        /// <summary>
        /// Optional; sets the body of the request as raw text, cannot be used with other parameter types in the same request
        /// </summary>
        /// <value>Optional; sets the body of the request as raw text, cannot be used with other parameter types in the same request</value>
        [DataMember(Name="RawTextBody", EmitDefaultValue=false)]
        public HttpRawTextParameter RawTextBody { get; set; }

        /// <summary>
        /// Optional; set the body of the request as binary, cannot be used with other parameter types in the same request
        /// </summary>
        /// <value>Optional; set the body of the request as binary, cannot be used with other parameter types in the same request</value>
        [DataMember(Name="RawBinaryBody", EmitDefaultValue=false)]
        public HttpRawBinaryParameter RawBinaryBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HttpOrchestrationTask {\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  HttpMethod: ").Append(HttpMethod).Append("\n");
            sb.Append("  URL: ").Append(URL).Append("\n");
            sb.Append("  HttpHeaders: ").Append(HttpHeaders).Append("\n");
            sb.Append("  QueryParameters: ").Append(QueryParameters).Append("\n");
            sb.Append("  FormDataParameters: ").Append(FormDataParameters).Append("\n");
            sb.Append("  WwwFormUrlEncodedParameters: ").Append(WwwFormUrlEncodedParameters).Append("\n");
            sb.Append("  RawTextBody: ").Append(RawTextBody).Append("\n");
            sb.Append("  RawBinaryBody: ").Append(RawBinaryBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HttpOrchestrationTask);
        }

        /// <summary>
        /// Returns true if HttpOrchestrationTask instances are equal
        /// </summary>
        /// <param name="input">Instance of HttpOrchestrationTask to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HttpOrchestrationTask input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.HttpMethod == input.HttpMethod ||
                    (this.HttpMethod != null &&
                    this.HttpMethod.Equals(input.HttpMethod))
                ) && 
                (
                    this.URL == input.URL ||
                    (this.URL != null &&
                    this.URL.Equals(input.URL))
                ) && 
                (
                    this.HttpHeaders == input.HttpHeaders ||
                    this.HttpHeaders != null &&
                    this.HttpHeaders.SequenceEqual(input.HttpHeaders)
                ) && 
                (
                    this.QueryParameters == input.QueryParameters ||
                    this.QueryParameters != null &&
                    this.QueryParameters.SequenceEqual(input.QueryParameters)
                ) && 
                (
                    this.FormDataParameters == input.FormDataParameters ||
                    this.FormDataParameters != null &&
                    this.FormDataParameters.SequenceEqual(input.FormDataParameters)
                ) && 
                (
                    this.WwwFormUrlEncodedParameters == input.WwwFormUrlEncodedParameters ||
                    this.WwwFormUrlEncodedParameters != null &&
                    this.WwwFormUrlEncodedParameters.SequenceEqual(input.WwwFormUrlEncodedParameters)
                ) && 
                (
                    this.RawTextBody == input.RawTextBody ||
                    (this.RawTextBody != null &&
                    this.RawTextBody.Equals(input.RawTextBody))
                ) && 
                (
                    this.RawBinaryBody == input.RawBinaryBody ||
                    (this.RawBinaryBody != null &&
                    this.RawBinaryBody.Equals(input.RawBinaryBody))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.HttpMethod != null)
                    hashCode = hashCode * 59 + this.HttpMethod.GetHashCode();
                if (this.URL != null)
                    hashCode = hashCode * 59 + this.URL.GetHashCode();
                if (this.HttpHeaders != null)
                    hashCode = hashCode * 59 + this.HttpHeaders.GetHashCode();
                if (this.QueryParameters != null)
                    hashCode = hashCode * 59 + this.QueryParameters.GetHashCode();
                if (this.FormDataParameters != null)
                    hashCode = hashCode * 59 + this.FormDataParameters.GetHashCode();
                if (this.WwwFormUrlEncodedParameters != null)
                    hashCode = hashCode * 59 + this.WwwFormUrlEncodedParameters.GetHashCode();
                if (this.RawTextBody != null)
                    hashCode = hashCode * 59 + this.RawTextBody.GetHashCode();
                if (this.RawBinaryBody != null)
                    hashCode = hashCode * 59 + this.RawBinaryBody.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
