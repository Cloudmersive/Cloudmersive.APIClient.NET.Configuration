/* 
 * configapi
 *
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Configuration.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Configuration.Model
{
    /// <summary>
    /// Request to create a setting
    /// </summary>
    [DataContract]
    public partial class CreateSettingRequest :  IEquatable<CreateSettingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSettingRequest" /> class.
        /// </summary>
        /// <param name="bucketID">BucketID of the bucket to place the setting in; you can create a bucket by navigating to account.cloudmersive.com, clicking on Settings &amp;gt; API Configuration &amp;gt; Create Bucket.</param>
        /// <param name="bucketSecretKey">SecretKey of the bucket to place the setting in; you can create a bucket by navigating to account.cloudmersive.com, clicking on Settings &amp;gt; API Configuration &amp;gt; Create Bucket.</param>
        /// <param name="settingName">Name of the setting to create.</param>
        /// <param name="settingType">Type of setting to create; possible values are STRING, JSON.</param>
        /// <param name="settingValue">Initial value of the setting.</param>
        /// <param name="settingDescription">Description of the setting.</param>
        /// <param name="settingTags">Tags to apply to the setting.</param>
        public CreateSettingRequest(string bucketID = default(string), string bucketSecretKey = default(string), string settingName = default(string), string settingType = default(string), Object settingValue = default(Object), string settingDescription = default(string), string settingTags = default(string))
        {
            this.BucketID = bucketID;
            this.BucketSecretKey = bucketSecretKey;
            this.SettingName = settingName;
            this.SettingType = settingType;
            this.SettingValue = settingValue;
            this.SettingDescription = settingDescription;
            this.SettingTags = settingTags;
        }
        
        /// <summary>
        /// BucketID of the bucket to place the setting in; you can create a bucket by navigating to account.cloudmersive.com, clicking on Settings &amp;gt; API Configuration &amp;gt; Create Bucket
        /// </summary>
        /// <value>BucketID of the bucket to place the setting in; you can create a bucket by navigating to account.cloudmersive.com, clicking on Settings &amp;gt; API Configuration &amp;gt; Create Bucket</value>
        [DataMember(Name="BucketID", EmitDefaultValue=false)]
        public string BucketID { get; set; }

        /// <summary>
        /// SecretKey of the bucket to place the setting in; you can create a bucket by navigating to account.cloudmersive.com, clicking on Settings &amp;gt; API Configuration &amp;gt; Create Bucket
        /// </summary>
        /// <value>SecretKey of the bucket to place the setting in; you can create a bucket by navigating to account.cloudmersive.com, clicking on Settings &amp;gt; API Configuration &amp;gt; Create Bucket</value>
        [DataMember(Name="BucketSecretKey", EmitDefaultValue=false)]
        public string BucketSecretKey { get; set; }

        /// <summary>
        /// Name of the setting to create
        /// </summary>
        /// <value>Name of the setting to create</value>
        [DataMember(Name="SettingName", EmitDefaultValue=false)]
        public string SettingName { get; set; }

        /// <summary>
        /// Type of setting to create; possible values are STRING, JSON
        /// </summary>
        /// <value>Type of setting to create; possible values are STRING, JSON</value>
        [DataMember(Name="SettingType", EmitDefaultValue=false)]
        public string SettingType { get; set; }

        /// <summary>
        /// Initial value of the setting
        /// </summary>
        /// <value>Initial value of the setting</value>
        [DataMember(Name="SettingValue", EmitDefaultValue=false)]
        public Object SettingValue { get; set; }

        /// <summary>
        /// Description of the setting
        /// </summary>
        /// <value>Description of the setting</value>
        [DataMember(Name="SettingDescription", EmitDefaultValue=false)]
        public string SettingDescription { get; set; }

        /// <summary>
        /// Tags to apply to the setting
        /// </summary>
        /// <value>Tags to apply to the setting</value>
        [DataMember(Name="SettingTags", EmitDefaultValue=false)]
        public string SettingTags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSettingRequest {\n");
            sb.Append("  BucketID: ").Append(BucketID).Append("\n");
            sb.Append("  BucketSecretKey: ").Append(BucketSecretKey).Append("\n");
            sb.Append("  SettingName: ").Append(SettingName).Append("\n");
            sb.Append("  SettingType: ").Append(SettingType).Append("\n");
            sb.Append("  SettingValue: ").Append(SettingValue).Append("\n");
            sb.Append("  SettingDescription: ").Append(SettingDescription).Append("\n");
            sb.Append("  SettingTags: ").Append(SettingTags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSettingRequest);
        }

        /// <summary>
        /// Returns true if CreateSettingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSettingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSettingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BucketID == input.BucketID ||
                    (this.BucketID != null &&
                    this.BucketID.Equals(input.BucketID))
                ) && 
                (
                    this.BucketSecretKey == input.BucketSecretKey ||
                    (this.BucketSecretKey != null &&
                    this.BucketSecretKey.Equals(input.BucketSecretKey))
                ) && 
                (
                    this.SettingName == input.SettingName ||
                    (this.SettingName != null &&
                    this.SettingName.Equals(input.SettingName))
                ) && 
                (
                    this.SettingType == input.SettingType ||
                    (this.SettingType != null &&
                    this.SettingType.Equals(input.SettingType))
                ) && 
                (
                    this.SettingValue == input.SettingValue ||
                    (this.SettingValue != null &&
                    this.SettingValue.Equals(input.SettingValue))
                ) && 
                (
                    this.SettingDescription == input.SettingDescription ||
                    (this.SettingDescription != null &&
                    this.SettingDescription.Equals(input.SettingDescription))
                ) && 
                (
                    this.SettingTags == input.SettingTags ||
                    (this.SettingTags != null &&
                    this.SettingTags.Equals(input.SettingTags))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BucketID != null)
                    hashCode = hashCode * 59 + this.BucketID.GetHashCode();
                if (this.BucketSecretKey != null)
                    hashCode = hashCode * 59 + this.BucketSecretKey.GetHashCode();
                if (this.SettingName != null)
                    hashCode = hashCode * 59 + this.SettingName.GetHashCode();
                if (this.SettingType != null)
                    hashCode = hashCode * 59 + this.SettingType.GetHashCode();
                if (this.SettingValue != null)
                    hashCode = hashCode * 59 + this.SettingValue.GetHashCode();
                if (this.SettingDescription != null)
                    hashCode = hashCode * 59 + this.SettingDescription.GetHashCode();
                if (this.SettingTags != null)
                    hashCode = hashCode * 59 + this.SettingTags.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
