/* 
 * configapi
 *
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Configuration.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Configuration.Model
{
    /// <summary>
    /// CreateSettingResponse
    /// </summary>
    [DataContract]
    public partial class CreateSettingResponse :  IEquatable<CreateSettingResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateSettingResponse" /> class.
        /// </summary>
        /// <param name="successful">successful.</param>
        /// <param name="settingDefinitionID">settingDefinitionID.</param>
        /// <param name="settingValueID">settingValueID.</param>
        /// <param name="errorMessage">errorMessage.</param>
        public CreateSettingResponse(bool? successful = default(bool?), string settingDefinitionID = default(string), string settingValueID = default(string), string errorMessage = default(string))
        {
            this.Successful = successful;
            this.SettingDefinitionID = settingDefinitionID;
            this.SettingValueID = settingValueID;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Gets or Sets Successful
        /// </summary>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Gets or Sets SettingDefinitionID
        /// </summary>
        [DataMember(Name="SettingDefinitionID", EmitDefaultValue=false)]
        public string SettingDefinitionID { get; set; }

        /// <summary>
        /// Gets or Sets SettingValueID
        /// </summary>
        [DataMember(Name="SettingValueID", EmitDefaultValue=false)]
        public string SettingValueID { get; set; }

        /// <summary>
        /// Gets or Sets ErrorMessage
        /// </summary>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateSettingResponse {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  SettingDefinitionID: ").Append(SettingDefinitionID).Append("\n");
            sb.Append("  SettingValueID: ").Append(SettingValueID).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateSettingResponse);
        }

        /// <summary>
        /// Returns true if CreateSettingResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateSettingResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateSettingResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.SettingDefinitionID == input.SettingDefinitionID ||
                    (this.SettingDefinitionID != null &&
                    this.SettingDefinitionID.Equals(input.SettingDefinitionID))
                ) && 
                (
                    this.SettingValueID == input.SettingValueID ||
                    (this.SettingValueID != null &&
                    this.SettingValueID.Equals(input.SettingValueID))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.SettingDefinitionID != null)
                    hashCode = hashCode * 59 + this.SettingDefinitionID.GetHashCode();
                if (this.SettingValueID != null)
                    hashCode = hashCode * 59 + this.SettingValueID.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
