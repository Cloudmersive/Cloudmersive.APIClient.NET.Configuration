/* 
 * configapi
 *
 * Config API lets you easily manage configuration at scale.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.Configuration.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.Configuration.Model
{
    /// <summary>
    /// Re-use the output from a previously-completed task
    /// </summary>
    [DataContract]
    public partial class TaskOutputReference :  IEquatable<TaskOutputReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskOutputReference" /> class.
        /// </summary>
        /// <param name="taskName">Name of the task to use the output from.</param>
        /// <param name="targetType">Type to convert the output from the referenced task to; possible values are string, binary.</param>
        public TaskOutputReference(string taskName = default(string), string targetType = default(string))
        {
            this.TaskName = taskName;
            this.TargetType = targetType;
        }
        
        /// <summary>
        /// Name of the task to use the output from
        /// </summary>
        /// <value>Name of the task to use the output from</value>
        [DataMember(Name="TaskName", EmitDefaultValue=false)]
        public string TaskName { get; set; }

        /// <summary>
        /// Type to convert the output from the referenced task to; possible values are string, binary
        /// </summary>
        /// <value>Type to convert the output from the referenced task to; possible values are string, binary</value>
        [DataMember(Name="TargetType", EmitDefaultValue=false)]
        public string TargetType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskOutputReference {\n");
            sb.Append("  TaskName: ").Append(TaskName).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskOutputReference);
        }

        /// <summary>
        /// Returns true if TaskOutputReference instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskOutputReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskOutputReference input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TaskName == input.TaskName ||
                    (this.TaskName != null &&
                    this.TaskName.Equals(input.TaskName))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    (this.TargetType != null &&
                    this.TargetType.Equals(input.TargetType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TaskName != null)
                    hashCode = hashCode * 59 + this.TaskName.GetHashCode();
                if (this.TargetType != null)
                    hashCode = hashCode * 59 + this.TargetType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
